name: Nightly Build - iOS

on:
  schedule:
  - cron: "45 23 * * *"
  
jobs:  
  buildios:
    name: "Nightly Build - iOS"
    env:
        ANDROID_HOME: "/Users/runner/Library/Android/sdk"
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v1

    - name: "[Pre] Install Requirements"
      shell: bash
      run: |
          brew install coreutils
          brew install bash
          brew install socat
          brew install hyperkit
          mkdir -p /Users/runner/trace
    - name: "[Pre] Install Docker"
      shell: bash
      run: |
          mkdir -p /Users/runner/.docker/machine/cache
          curl -Lo ~/.docker/machine/cache/boot2docker.iso https://github.com/boot2docker/boot2docker/releases/download/v19.03.5/boot2docker.iso
          brew install docker docker-machine-driver-xhyve
          sudo chown root:wheel $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
          sudo chmod u+s $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
          while ! docker-machine  --github-api-token=${{ secrets.GITHUBAPITOKEN }} create --driver xhyve default; do
            docker-machine rm -f default
            sleep 1;
          done
          # Export variable (this target)
          eval "$(docker-machine env default)"
          DOCKER_TLS_VERIFY="$(   docker-machine env default | grep DOCKER_TLS_VERIFY   | sed -e 's/.*="//g' -e 's/"$//g' )"
          DOCKER_HOST="$(         docker-machine env default | grep DOCKER_HOST         | sed -e 's/.*="//g' -e 's/"$//g' )"
          DOCKER_CERT_PATH="$(    docker-machine env default | grep DOCKER_CERT_PATH    | sed -e 's/.*="//g' -e 's/"$//g' )"
          DOCKER_MACHINE_NAME="$( docker-machine env default | grep DOCKER_MACHINE_NAME | sed -e 's/.*="//g' -e 's/"$//g' )"
          DOCKER_IP="$( docker-machine ip default )";
          # Export variable (this other targets)
          # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions#set-an-environment-variable-set-env
          echo ::set-env name=DOCKER_TLS_VERIFY::${DOCKER_TLS_VERIFY}
          echo ::set-env name=DOCKER_HOST::${DOCKER_HOST}
          echo ::set-env name=DOCKER_CERT_PATH::${DOCKER_CERT_PATH}
          echo ::set-env name=DOCKER_MACHINE_NAME::${DOCKER_MACHINE_NAME}
          echo ::set-env name=localhostaddress::${DOCKER_IP}
          
          # Show info
          docker-machine ls
          docker-machine env default
          docker version
    - name: "[Pre] Setup Docker machine"
      shell: bash
      run: |
          ## Setup DNS records
          echo "127.0.0.1  localhost" | sudo tee -a /etc/hosts
          # Portforwarding from DOCKER_HOST to local
          HOST="$( echo "${DOCKER_HOST}" | sed -e 's|^tcp://||g' -e 's|:.*||g' )"
          echo "${HOST}"
          sudo socat -s -d -d tcp-listen:80,reuseaddr,fork tcp:${HOST}:80 &
          sleep 2
          sudo socat -s -d -d tcp-listen:443,reuseaddr,fork tcp:${HOST}:443 &
          sleep 2
          if ! netstat -an | grep -i LISTEN | grep -E '(:80)|(\.80)\s'; then
            netstat -an | grep -i LISTEN;
            false;
          fi
          if ! netstat -an | grep -i LISTEN | grep -E '(:443)|(\.443)\s'; then
            netstat -an | grep -i LISTEN;
            false;
          fi
          #host localhost
          #curl -sS -I 'http://localhost:80' || true
          #curl -sS -I 'https://localhost:443' || true
    
    - name: Setup Nuget
      uses: olegtarasov/download-nuget@v1
          
    - name: Restore Nuget Packages
      run: mono $NUGET_EXE restore TransactionMobile/TransactionMobile.sln -source "https://api.nuget.org/v3/index.json;https://www.myget.org/F/transactionprocessing/api/v3/index.json"

    - name: Build Code
      run: msbuild /p:Configuration="Release" /p:Platform="iPhoneSimulator" /t:Build TransactionMobile/TransactionMobile.sln

    - name: Run Unit Tests
      run: mono $GITHUB_WORKSPACE/TransactionMobile/packages/NUnit.ConsoleRunner.3.11.1/tools/nunit3-console.exe TransactionMobile/TransactionMobile.UnitTests/bin/Release/TransactionMobile.UnitTests.dll
   
    - name: Run Integration Tests - iOS
      run: mono ./TransactionMobile/packages/NUnit.ConsoleRunner.3.11.1/tools/nunit3-console.exe TransactionMobile/TransactionMobile.IntegrationTests/bin/Release/TransactionMobile.IntegrationTests.dll --where "cat == iOS"   
   
    - name: Setup tmate session
      if: failure()
      uses: mxschmitt/action-tmate@v1
